Core
====

explain how the core works and the different notions

Items
~~~~~

Medical Item
------------

A Medical Item is the most basic piece of information *managed* by the core and
related to a patient.
It can be specialized in the different types of objects:

- Observation
- Issue
- Action

>>> from vct.core import Item, Observation, Issue, Action
>>> item = Item()
>>> action, issue, observation = Action(), Issue(), Observation()


Agent
-----

An agent is a person or an entity responsible of handling medical items.

>>> from vct.core import Agent, Patient, CareProvider
>>> agent, patient = Agent(), Patient()
 >>> careprovider = CareProvider()

A patient is an agent subject of medical care. A CareProvider is an Agent as
well.

#>>> isinstance(patient, Agent)
#True
#>>> isinstance(careprovider, Agent)
#True

Relation
--------

A relation is used to represent a link between two notions (agent or
medicalitems). It can then be stored independently (RDF store?)

>>> from vct.core.relation import Relation, Predicate

We can create a relation between two Medical Items, using a verb coming from an
ontology.

>>> item1 = Item()
>>> item2 = Item()
>>> predicate = Predicate()
>>> relation = Relation(item1, predicate, item2)
>>> relation.subj is item1
True
>>> relation.obj is item2
True
>>> relation.predicate is predicate
True

Storage and querying
~~~~~~~~~~~~~~~~~~~~
Create, Read, Updade, Delete, Search

An item contains a data attribute holding data.

>>> from vct.core.db.interfaces import IDatabase
>>> item = Item()
>>> item.data = {'key': 'value1'}

We can save the object using a uid:

>>> local_uid = IDatabase(item).put('frsecu', 1234)
>>> del item

We can retrieve the object given a uid:

>>> number, results = IDatabase(Item()).get(uid=('frsecu', 1234))
>>> number
1

We check that the given uid and data are there
>>> item = results[0]
>>> item.uids['frsecu']
1234
>>> item.data
{'key': 'value1'}

We also have an automatic db-local uid:

>>> item.uids['server1'] == local_uid
True

We can retrieve the object using any key:

>>> number, results = IDatabase(Item()).get(data={'key': 'value1'})
>>> number
1
>>> item = results[0]
>>> item.data
{'key': 'value1'}
>>> item.uids['frsecu']
1234
>>> item.uids['server1'] == local_uid
True



We can update the object data:

>>> item.data['key'] = 'value2'
>>> item.data['key2'] = 10
>>> local_uid1 = IDatabase(item).put()
>>> local_uid2 = IDatabase(item).put()
>>> local_uid == local_uid1 == local_uid2
True

>>> del item
>>> number, results = IDatabase(Item()).get(data={'key': 'value1'})
>>> number
0
>>> number, results = IDatabase(Item()).get(data={'key': 'value2'})
>>> number
1
>>> item = results[0]
>>> item.data['key']
'value2'
>>> item.data['key2']
10
>>> item.uids['frsecu']
1234
>>> item.uids['server1'] == local_uid
True


We can also add a uid by putting again:

>>> local_uid = IDatabase(item).put('labo1', 5678)
>>> number, results = IDatabase(Item()).get(uid=('frsecu', 1234))
>>> item = results[0]
>>> item.uids['frsecu']
1234
>>> item.uids['labo1']
5678
>>> number, results = IDatabase(Item()).get(uid=('labo1', 5678))
>>> item = results[0]
>>> item.uids['frsecu']
1234
>>> item.uids['labo1']
5678

We can delete the item using any uid:

>>> IDatabase(Item()).delete('frsecu', 1234)

The item still exists, but only contains the labo1 uid:

>>> number, results = IDatabase(Item()).get(uid=('frsecu', 1234))
>>> number
0
>>> number, results = IDatabase(Item()).get(uid=('labo1', 5678))
>>> results[0].data['key2']
10
>>> number, results = IDatabase(Item()).get(data={'key': 'value2'})
>>> number
1

We delete using the 2nd and 3rd uid, then we cannot retrieve the object again:

>>> IDatabase(Item()).delete('labo1', 5678)
>>> IDatabase(Item()).delete('server1', local_uid)
>>> number, results = IDatabase(Item()).get(uid=('labo1', 5678))
>>> number
0
>>> number, results = IDatabase(Item()).get(data={'key': 'value2'})
>>> number
0

We can also create a new record without giving a uid. The chosen uid is returned:

>>> item = Item()
>>> item.data = {'key': 'value2'}

We can also save the object without using a uid:

>>> local_uid = IDatabase(item).put()
>>> local_uid > 0
True
>>> IDatabase(Item()).get(uid=('server1', local_uid))[1][0].data['key']
'value2'

>>> IDatabase(Item()).delete('server1', local_uid)
>>> number, results = IDatabase(Item()).get(data={})
>>> number
0



Capabilities
~~~~~~~~~~~~

Group
-----

a group is a collection of items, people, etc.

>>> from vct.core.group import IGroup
>>> from vct.core.group import Group
>>> patients = Group(name=u"patients")
>>>

We can add items to the group, delete items

We can ask to which groups belongs an item


Trust level
-----------
#Any information has a trust level.
#
#>>> item = Item()
#>>> item.name = u'Etienne'
#>>> import datetime
#>>> item.birth_date = datetime.date(2001, 1, 1)
#
#We want the item to provide trust features:
#
#>>> from vct.core.trust import ITrustable
#>>> from zope.interface import alsoProvides
#>>> alsoProvides(item, ITrustable)
#
#We've just entered the information, so we're responsible for setting the trust
#level. We're not sure about the birth date. What is its trust level?
#
#>>> from vct.core.trust import ITrust
#>>> ITrust(item).set_value('birth_date', 0.4)
#>>> ITrust(item).get_value('birth_date')
#0.40000000000000002
#
#We can store different trust level as strings:
#
#>>> ITrust(item).levels = {'sure': (0.5, 1.0),
#...                           'possible': (0.0, 0.5)}
#>>> ITrust(item).levels
#{'sure': (0.5, 1.0), 'possible': (0.0, 0.5)}
#
#The trust level can be queried as a identifier:
#
#>>> ITrust(item).get_level('birthdate')
#'possible'
#
#We can also store the identifier:
#
#>>> ITrust(item).set_level('birthdate', 'sure')
#>>> ITrust(item).get_level('birthdate')
#'sure'
#>>> ITrust(item).get_value('birthdate')
#0.75
#>>> ITrust(item).set_level('birthdate') = 'possible'
#>>> ITrust(item).get_level('birthdate')
#'possible'
#>>> ITrust(item).get_value('birthdate')
#0.25
#
#>>> ITrust(item).set_value('birthdate') = 0.2
#>>> ITrust(item).get_level('birthdate')
#'possible'
#>>> ITrust(item).set_value('birthdate') = 0.8
#>>> ITrust(item).get_level('birthdate')
#'sure'


Versionning
-----------

We should just add a 'version' key in the data dict, giving the version of the current data:

{
'uids': {'frsecu':'34535235234235', 'hop1': '123'},
'data': {'firstname': u'John', 'lastname': u'Doe'},
'version': 'last',
}


Advanced objects
~~~~~~~~~~~~~~~~

Advanced objects are objects providing several capabilities.

AgentGroup
----------

An AgentGroup is a Agent providing Group capabilities. It can be used for an
hospital.

>>> from vct.core.agent import AgentGroup
>>> from zope.interface import providedBy
>>> hospital = AgentGroup()
>>> IGroup.providedBy(hospital)
True





